apply plugin: 'com.android.application'
apply from: '../tinkerConfig.gradle'
apply from: '../signingHelper.gradle'
apply plugin: 'io.fabric'
apply plugin: 'org.sonarqube'

apply from: '../config/quality.gradle'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=format:%h--TIME--%ci'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def gitVersionCode = { ->
    def cmd = 'git rev-list HEAD --count'
    return cmd.execute().text.trim().toInteger()
}

def intGitVersionCode = gitVersionCode()

def getVersionName = { ->
    return "v${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}(Build${intGitVersionCode})"
}

android {
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        applicationId "com.zmsoft.ccd"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode intGitVersionCode
        versionName getVersionName()

        //获取Git最新commit id，debug版本显示在“关于二维火”界面，方面测试时区分版本
        buildConfigField "String", "GitHash", "\"${getGitHash()}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'com.zmsoft.ccd.MyEventBusIndex', moduleName: project.getName()]
            }
        }

        //JPush
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : JPUSH_APPKEY, //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        multiDexEnabled true
    }

    // 开店SDK+登录配置
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    signingConfigs {
        releaseConfig
    }

    productFlavors {
        internal {
            //配置applicationIdSuffix会导致JPush启动失败，暂时注释掉该功能
//            applicationIdSuffix = ".internal"
        }
        production
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            ext.enableCrashlytics = false
            signingConfig signingConfigs.releaseConfig
        }

        release {
            versionNameSuffix "-release"
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }

        beta {
            initWith release
            versionNameSuffix "-beta"
        }

        preview {
            initWith release
            versionNameSuffix "-preview"
        }

//        sonar {
//        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = ""
                if (outputFile.name.contains("production")) {
                    fileName = "${APPLICATION_NAME}-${android.defaultConfig.versionName}-${variant.buildType.name}.apk"
                } else {
                    fileName = "${APPLICATION_NAME}-${variant.buildType.name}.apk"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        def type = variant.buildType*.name
        if (names.contains("production") && !type.contains("release")) {
            setIgnore(true)
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:$SUPPORT_LIB_VERSION"
    compile "com.android.support:support-v13:$SUPPORT_LIB_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIB_VERSION"
    compile "com.android.support:design:$SUPPORT_LIB_VERSION"
    //代码检查
    internalCompile 'com.dfire.mobile.config:lint-config-wrapper:1.0.1'
    // Dagger dependencies
    provided 'org.glassfish:javax.annotation:10.0-b28'

    internalCompile 'com.tencent.bugly:crashreport:latest.release'
    internalCompile 'com.tencent.bugly:nativecrashreport:latest.release'

    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTER_KNIFE_VERSION"
    annotationProcessor "org.greenrobot:eventbus-annotation-processor:$EVENTBUS_ANNOTATION_PROCESSOR_VERSION"
    annotationProcessor "com.google.dagger:dagger-compiler:$DAGGER_COMPILER_VERSION"
    annotationProcessor "com.chiclaim:router-compiler:${MROUTER_COMPILER_VERSION}"

    //JPush
    compile 'cn.jiguang.sdk:jpush:3.0.3'  // 此处以JPush 3.0.3 版本为例。
    compile 'cn.jiguang.sdk:jcore:1.1.1'  // 此处以JCore 1.1.1 版本为例。
    //app 升级

    compile 'com.dfire.mobile.config:update-config:2.0.8'
    compile 'com.dfire.mobile.component:missile:0.8.5.3.2'

    //内存泄露检查
    internalCompile "com.squareup.leakcanary:leakcanary-android:$LEAKCANARY_ANDROID_VERSION"
    productionCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAKCANARY_ANDROID_NO_OP_VERSION"

    compile 'com.dfire.mobile.hotpatch:tinker-server:0.4.9'
    compile "com.tencent.tinker:tinker-android-lib:$TINKER_VERSION"
    provided "com.tencent.tinker:tinker-android-anno:$TINKER_VERSION"

    if (!SPLIT_MODE.toBoolean()) {
        if (DEPEND_LOCAL.toBoolean()) {
            compile project(path: ':Menu')
            compile project(path: ':Takeout')
            compile project(path: ':Receipt')
        } else {
            compile "com.zmsoft.ccd.module:takeout:$CCD_TAKEOUT_VERSION"
            compile "com.zmsoft.ccd.module:menu:$CCD_MENU_VERSION"
            compile "com.zmsoft.ccd.module:receipt:$CCD_RECEIPT_VERSION"
        }

    } else {
        if (DEPEND_LOCAL.toBoolean()) {
            compile project(path: ':lib-base')
        } else {
            compile "com.zmsoft.ccd.module:lib-base:$CCD_BASE_VERSION"
        }
    }

    if (DEPEND_LOCAL.toBoolean()) {
        compile project(path: ':lib-scan')
        compile project(path: ':lib-print')
        compile project(path: ':lib-pos')
    } else {
        compile "com.zmsoft.ccd.module:lib-print:$CCD_PRINT_VERSION"
        compile "com.zmsoft.ccd.module:lib-scan:$CCD_SCAN_VERSION"
        compile "com.zmsoft.ccd.module:lib-pos:$CCD_POS_VERSION"
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    compile 'com.android.support:multidex:1.0.1'

    // 登录SDK
//    compile('tdf.zmsoft.library:tdf-login-test:0.3.0', {
//        exclude group: 'com.android.support', module: 'appcompat-v7'
//        exclude group: 'com.google.zxing', module: 'core'
//        exclude group: 'okhttp3'
//        exclude group: 'butterknife'
//        exclude group: 'eventbus'
//        exclude group: 'io.reactivex', module: 'rxjava'
//        exclude group: 'com.orhanobut.logger'
//    })
    // 开店SDK
    compile("phone.rest.zmsoft.manager.module.openshop:OpenShop:0.2.0", {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.google.zxing', module: 'core'
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.dfire.sdk', module: 'dop-sdk'
    })
    // 智齿在线客服
    compile 'com.sobot.chat:sobotsdk:2.3.2'
    // 微信登录
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'
}

sonarqube {
    properties {
        property "sonar.projectName", "CloudCashDesk"
        property "sonar.projectKey", "com.zmsoft.ccd"
        property "sonar.projectVersion", android.defaultConfig.versionCode
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "http://sonar.2dfire-inc.com"
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}
